pub const struct_IXMLDOMNotationVtbl = extern struct {
    query_interface: ?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    add_ref: ?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG),
    release: ?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG),
    get_type_info_count: ?*const fn ([*c]IXMLDOMNotation, [*c]UINT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]UINT) callconv(.c) HRESULT),
    get_type_info: ?*const fn ([*c]IXMLDOMNotation, UINT, LCID, [*c][*c]ITypeInfo) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, UINT, LCID, [*c][*c]ITypeInfo) callconv(.c) HRESULT),
    get_ids_of_names: ?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]LPOLESTR, UINT, LCID, [*c]DISPID) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]LPOLESTR, UINT, LCID, [*c]DISPID) callconv(.c) HRESULT),
    invoke: ?*const fn ([*c]IXMLDOMNotation, DISPID, [*c]const IID, LCID, WORD, [*c]DISPPARAMS, [*c]VARIANT, [*c]EXCEPINFO, [*c]UINT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, DISPID, [*c]const IID, LCID, WORD, [*c]DISPPARAMS, [*c]VARIANT, [*c]EXCEPINFO, [*c]UINT) callconv(.c) HRESULT),
    get_nodeName: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_nodeValue: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    put_nodeValue: ?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT),
    get_nodeType: ?*const fn ([*c]IXMLDOMNotation, [*c]DOMNodeType) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]DOMNodeType) callconv(.c) HRESULT),
    get_parentNode: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_childNodes: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT),
    get_firstChild: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_lastChild: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_previousSibling: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_nextSibling: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_attributes: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNamedNodeMap) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNamedNodeMap) callconv(.c) HRESULT),
    insert_before: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    replace_child: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    remove_child: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    append_child: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    has_child_nodes: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT),
    get_ownerDocument: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMDocument) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMDocument) callconv(.c) HRESULT),
    clone_node: ?*const fn ([*c]IXMLDOMNotation, VARIANT_BOOL, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, VARIANT_BOOL, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_nodeTypeString: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_text: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    put_text: ?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT),
    get_specified: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT),
    get_definition: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_nodeTypedValue: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    put_nodeTypedValue: ?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT),
    get_dataType: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    put_dataType: ?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT),
    get_xml: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    transform_node: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]BSTR) callconv(.c) HRESULT),
    select_nodes: ?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT),
    select_single_node: ?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_parsed: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT),
    get_namespaceURI: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_prefix: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_baseName: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    transform_node_to_object: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT) callconv(.c) HRESULT),
    get_publicId: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    get_systemId: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
};
pub const struct_IMonikerVtbl = extern struct {
    query_interface: ?*const fn ([*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    add_ref: ?*const fn ([*c]IMoniker) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IMoniker) callconv(.c) ULONG),
    release: ?*const fn ([*c]IMoniker) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IMoniker) callconv(.c) ULONG),
    get_class_id: ?*const fn ([*c]IMoniker, [*c]CLSID) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]CLSID) callconv(.c) HRESULT),
    is_dirty: ?*const fn ([*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker) callconv(.c) HRESULT),
    load: ?*const fn ([*c]IMoniker, [*c]IStream) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IStream) callconv(.c) HRESULT),
    save: ?*const fn ([*c]IMoniker, [*c]IStream, WINBOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IStream, WINBOOL) callconv(.c) HRESULT),
    get_size_max: ?*const fn ([*c]IMoniker, [*c]ULARGE_INTEGER) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]ULARGE_INTEGER) callconv(.c) HRESULT),
    bind_to_object: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    bind_to_storage: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    reduce: ?*const fn ([*c]IMoniker, [*c]IBindCtx, DWORD, [*c][*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, DWORD, [*c][*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    compose_with: ?*const fn ([*c]IMoniker, [*c]IMoniker, WINBOOL, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker, WINBOOL, [*c][*c]IMoniker) callconv(.c) HRESULT),
    @"enum": ?*const fn ([*c]IMoniker, WINBOOL, [*c][*c]IEnumMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, WINBOOL, [*c][*c]IEnumMoniker) callconv(.c) HRESULT),
    is_equal: ?*const fn ([*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT),
    hash: ?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT),
    is_running: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT),
    get_time_of_last_change: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]FILETIME) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]FILETIME) callconv(.c) HRESULT),
    inverse: ?*const fn ([*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    common_prefix_with: ?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    relative_path_to: ?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    get_display_name: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]LPOLESTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]LPOLESTR) callconv(.c) HRESULT),
    parse_display_name: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, LPOLESTR, [*c]ULONG, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, LPOLESTR, [*c]ULONG, [*c][*c]IMoniker) callconv(.c) HRESULT),
    is_system_moniker: ?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT),
};
