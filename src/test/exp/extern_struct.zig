pub const PES = @import("PackedEnumSet");
pub const struct_IXMLDOMNotationVtbl = extern struct {
    QueryInterface: ?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    AddRef: ?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG),
    Release: ?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation) callconv(.c) ULONG),
    GetTypeInfoCount: ?*const fn ([*c]IXMLDOMNotation, [*c]UINT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]UINT) callconv(.c) HRESULT),
    GetTypeInfo: ?*const fn ([*c]IXMLDOMNotation, UINT, LCID, [*c][*c]ITypeInfo) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, UINT, LCID, [*c][*c]ITypeInfo) callconv(.c) HRESULT),
    GetIDsOfNames: ?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]LPOLESTR, UINT, LCID, [*c]DISPID) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]const IID, [*c]LPOLESTR, UINT, LCID, [*c]DISPID) callconv(.c) HRESULT),
    Invoke: ?*const fn ([*c]IXMLDOMNotation, DISPID, [*c]const IID, LCID, WORD, [*c]DISPPARAMS, [*c]VARIANT, [*c]EXCEPINFO, [*c]UINT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, DISPID, [*c]const IID, LCID, WORD, [*c]DISPPARAMS, [*c]VARIANT, [*c]EXCEPINFO, [*c]UINT) callconv(.c) HRESULT),
    get_nodeName: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_nodeValue: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    put_nodeValue: ?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT),
    get_nodeType: ?*const fn ([*c]IXMLDOMNotation, [*c]DOMNodeType) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]DOMNodeType) callconv(.c) HRESULT),
    get_parentNode: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_childNodes: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT),
    get_firstChild: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_lastChild: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_previousSibling: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_nextSibling: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_attributes: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNamedNodeMap) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNamedNodeMap) callconv(.c) HRESULT),
    insertBefore: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    replaceChild: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    removeChild: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    appendChild: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    hasChildNodes: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT),
    get_ownerDocument: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMDocument) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMDocument) callconv(.c) HRESULT),
    cloneNode: ?*const fn ([*c]IXMLDOMNotation, VARIANT_BOOL, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, VARIANT_BOOL, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_nodeTypeString: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_text: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    put_text: ?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT),
    get_specified: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT),
    get_definition: ?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_nodeTypedValue: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    put_nodeTypedValue: ?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, VARIANT) callconv(.c) HRESULT),
    get_dataType: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    put_dataType: ?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR) callconv(.c) HRESULT),
    get_xml: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    transformNode: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, [*c]BSTR) callconv(.c) HRESULT),
    selectNodes: ?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNodeList) callconv(.c) HRESULT),
    selectSingleNode: ?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, BSTR, [*c][*c]IXMLDOMNode) callconv(.c) HRESULT),
    get_parsed: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT_BOOL) callconv(.c) HRESULT),
    get_namespaceURI: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_prefix: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    get_baseName: ?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]BSTR) callconv(.c) HRESULT),
    transformNodeToObject: ?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]IXMLDOMNode, VARIANT) callconv(.c) HRESULT),
    get_publicId: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
    get_systemId: ?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IXMLDOMNotation, [*c]VARIANT) callconv(.c) HRESULT),
};
pub const struct_IMonikerVtbl = extern struct {
    QueryInterface: ?*const fn ([*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    AddRef: ?*const fn ([*c]IMoniker) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IMoniker) callconv(.c) ULONG),
    Release: ?*const fn ([*c]IMoniker) callconv(.c) ULONG = @import("std").mem.zeroes(?*const fn ([*c]IMoniker) callconv(.c) ULONG),
    GetClassID: ?*const fn ([*c]IMoniker, [*c]CLSID) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]CLSID) callconv(.c) HRESULT),
    IsDirty: ?*const fn ([*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker) callconv(.c) HRESULT),
    Load: ?*const fn ([*c]IMoniker, [*c]IStream) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IStream) callconv(.c) HRESULT),
    Save: ?*const fn ([*c]IMoniker, [*c]IStream, WINBOOL) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IStream, WINBOOL) callconv(.c) HRESULT),
    GetSizeMax: ?*const fn ([*c]IMoniker, [*c]ULARGE_INTEGER) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]ULARGE_INTEGER) callconv(.c) HRESULT),
    BindToObject: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    BindToStorage: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]const IID, [*c]?*anyopaque) callconv(.c) HRESULT),
    Reduce: ?*const fn ([*c]IMoniker, [*c]IBindCtx, DWORD, [*c][*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, DWORD, [*c][*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    ComposeWith: ?*const fn ([*c]IMoniker, [*c]IMoniker, WINBOOL, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker, WINBOOL, [*c][*c]IMoniker) callconv(.c) HRESULT),
    Enum: ?*const fn ([*c]IMoniker, WINBOOL, [*c][*c]IEnumMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, WINBOOL, [*c][*c]IEnumMoniker) callconv(.c) HRESULT),
    IsEqual: ?*const fn ([*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT),
    Hash: ?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT),
    IsRunning: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]IMoniker) callconv(.c) HRESULT),
    GetTimeOfLastChange: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]FILETIME) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]FILETIME) callconv(.c) HRESULT),
    Inverse: ?*const fn ([*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    CommonPrefixWith: ?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    RelativePathTo: ?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IMoniker, [*c][*c]IMoniker) callconv(.c) HRESULT),
    GetDisplayName: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]LPOLESTR) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, [*c]LPOLESTR) callconv(.c) HRESULT),
    ParseDisplayName: ?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, LPOLESTR, [*c]ULONG, [*c][*c]IMoniker) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]IBindCtx, [*c]IMoniker, LPOLESTR, [*c]ULONG, [*c][*c]IMoniker) callconv(.c) HRESULT),
    IsSystemMoniker: ?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT = @import("std").mem.zeroes(?*const fn ([*c]IMoniker, [*c]DWORD) callconv(.c) HRESULT),
};
